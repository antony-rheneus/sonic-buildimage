#  Copyright (C) Marvell Inc

# over ride default behaviour

echo "Preparing for installation ... "

# global defines
kernel_addr=0x1100000
fdt_addr=0x1000000
initrd_addr=0x2000000

kernel_fname="/boot/vmlinuz-4.9.0-9-2-armmp"
initrd_fname="/boot/initrd.img-4.9.0-9-2-armmp"
fdt_fname="/boot/armada-385-ET6448M_4G_Nand.dtb"

# global mount defines
demo_dev=ubi0
mtd_dev=/dev/$(cat /proc/mtd | grep "SONIC" | grep -o "mtd[0-9]")
mtd_num=$(echo $mtd_dev | grep -o "[0-9]")
demo_mnt=/tmp
FW_ENV='/dev/mtd0 0x00500000 0x80000 0x100000 8'

BOOTARGS='setenv bootargs root='$demo_dev' rw rootwait ubi.mtd='$mtd_num' rootfstype=ubifs panic=1 console=ttyS0,115200 ${othbootargs} ${mtdparts} ${linuxargs}'
UBI_LOAD='run ubi_sonic_boot_mount_ubi; ubifsload $kernel_addr $image_name;ubifsload $fdt_addr $fdt_name; ubifsload $initrd_addr $initrd_name'
BOOTARGS_OLD='setenv bootargs root='$demo_dev' rw rootwait ubi.mtd='$mtd_num' rootfstype=ubifs panic=1 console=ttyS0,115200 ${othbootargs} ${mtdparts} ${linuxargs_old}'
UBI_LOAD_OLD='run ubi_sonic_boot_mount_ubi; ubifsload $kernel_addr $image_name_old;ubifsload $fdt_addr $fdt_name_old; ubifsload $initrd_addr $initrd_name_old'
UBIBOOTCMD='run ubi_sonic_boot_bootargs; run ubi_sonic_boot_load; bootz $kernel_addr $initrd_addr $fdt_addr'
UBIBOOTCMD_OLD='run ubi_sonic_boot_bootargs_old; run ubi_sonic_boot_load_old; bootz $kernel_addr $initrd_addr $fdt_addr'

prepare_boot_menu() {
    echo "Setting up U-Boot environment..."

    if [ "$install_env" = "onie" ]; then
        FW_ARG="-f"
    fi

    echo $FW_ENV > /etc/fw_env.config
    image_name=${image_dir}${kernel_fname}
    initrd_name=${image_dir}${initrd_fname}
    fdt_name=${image_dir}${fdt_fname}

    image_name_old=$(fw_printenv -n image_name || true)
    initrd_name_old=$(fw_printenv -n initrd_name || true)
    fdt_name_old=$(fw_printenv -n fdt_name || true)
    linuxargs_old=$(fw_printenv -n linuxargs || true)
    sonic_version_old=$(fw_printenv -n sonic_version || true)
    fw_setenv ${FW_ARG} image_name $image_name > /dev/null
    fw_setenv ${FW_ARG} initrd_name $initrd_name > /dev/null
    fw_setenv ${FW_ARG} fdt_name $fdt_name > /dev/null
    fw_setenv ${FW_ARG} kernel_addr $kernel_addr > /dev/null
    fw_setenv ${FW_ARG} fdt_addr $fdt_addr > /dev/null
    fw_setenv ${FW_ARG} initrd_addr $initrd_addr > /dev/null
    fw_setenv ${FW_ARG} sonic_version $demo_volume_revision_label > /dev/null
    fw_setenv ${FW_ARG} image_name_old $image_name_old > /dev/null
    fw_setenv ${FW_ARG} initrd_name_old $initrd_name_old > /dev/null
    fw_setenv ${FW_ARG} fdt_name_old $fdt_name_old > /dev/null
    fw_setenv ${FW_ARG} linuxargs_old $linuxargs_old > /dev/null
    fw_setenv ${FW_ARG} sonic_version_old $sonic_version_old > /dev/null
    BOOT1='echo " \* Boot1: $sonic_version - run ubi_sonic_boot";echo;'
    BOOT2='echo " > Boot2: $sonic_version_old - run ubi_sonic_boot_old";echo;'
    BOOT3='echo " > Boot3: ONIE - run onie_nand_boot";echo;'
    BORDER='echo "---------------------------------------------------";echo;'
    fw_setenv ${FW_ARG} print_menu $BORDER $BOOT1 $BOOT2 $BOOT3 $BORDER> /dev/null

    #make sure ubi number (0) and ubi volume name (ubi0) are set correctly in bootargs_root:
    #For example, the below command creates an 3000MiB volume on UBI device 0:
    #setenv bootargs_root root=ubi0:ubi0 rw ubi.mtd=2 rootfstype=ubifs

    fw_setenv ${FW_ARG} mtdids 'nand0=armada-nand' > /dev/null
    fw_setenv ${FW_ARG} mtdparts 'mtdparts=armada-nand:10m(U-Boot)ro,20m@10m(ONIE),-(SONIC)' > /dev/null
    fw_setenv ${FW_ARG} ubi_sonic_boot_mount_ubi 'ubi part SONIC; ubifsmount ubi0' > /dev/null
    fw_setenv ${FW_ARG} linuxargs "net.ifnames=0 loopfstype=squashfs loop=$image_dir/$FILESYSTEM_SQUASHFS apparmor=1 security=apparmor usbcore.autosuspend=-1" > /dev/null

    fw_setenv ${FW_ARG} ubi_sonic_boot_bootargs $BOOTARGS > /dev/null
    fw_setenv ${FW_ARG} ubi_sonic_boot_load $UBI_LOAD > /dev/null
    fw_setenv ${FW_ARG} ubi_sonic_boot $UBIBOOTCMD > /dev/null
    fw_setenv ${FW_ARG} ubi_sonic_boot_bootargs_old $BOOTARGS_OLD > /dev/null
    fw_setenv ${FW_ARG} ubi_sonic_boot_load_old $UBI_LOAD_OLD > /dev/null
    fw_setenv ${FW_ARG} ubi_sonic_boot_old $UBIBOOTCMD_OLD > /dev/null
    fw_setenv ${FW_ARG} bootcmd 'run print_menu; usb start; run ubi_sonic_boot' > /dev/null

}

create_ubi_partition() {
    ubidetach /dev/ubi_ctrl -d 0 2>/dev/null || true 

    trap_push "${onie_bin} ubidetach -d 0 /dev/ubi_ctrl || true"
    echo -en "Format mtd partition '$mtd_dev' "
    ubiformat $mtd_dev -y -q || {
        echo "Failed"
    }

    #attaches MTD devices (which describe raw flash) to UBI and creates corresponding UBI devices; ('-m 2' --> mtd2)
    echo -en "ubiattach mtd '$mtd_num' "
    ubiattach /dev/ubi_ctrl -m $mtd_num || {
        echo "Failed"
    }

    #creates UBI volumes on UBI devices
    ubimkvol  /dev/$demo_dev -N $demo_dev -s 3900MiB
}

create_partition() {
    # Platform speicific partition 
    create_ubi_partition
}

mount_partition() {

    demo_mnt=$(mktemp -d) || {
        echo "Error: Unable to create file sstem mount point"
        exit 1
    }

    echo "Mounting $demo_dev on $demo_mnt "
    trap_push "${onie_bin} umount /dev/ubi0_0|| true"
    mount -t ubifs /dev/ubi0_0 $demo_mnt || {
        echo "Failed"
    }
}

bootloader_menu_config() {
    # Update uboot Environment
    prepare_boot_menu
}

